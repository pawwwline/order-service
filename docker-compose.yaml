services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order_service
    env_file:
      - .env
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
    depends_on:
        kafka:
          condition: service_healthy
        postgres:
          condition: service_healthy

    networks:
      - dev_network
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: dev_zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    networks:
      - dev_network

  kafka:
    image: bitnami/kafka:3.5
    container_name: dev_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - dev_network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:15
    container_name: dev_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - dev_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  dev_network:
    driver: bridge
